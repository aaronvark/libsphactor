<class name = "sphactor" state = "stable">
    <constructor>
        Constructor, creates a new Sphactor node. 
        <argument name = "name" type = "string" optional = "1" />
        <argument name = "uuid" type = "zuuid" optional = "1" />
    </constructor>

    <destructor>
        Destructor, destroys a Sphactor node. 
    </destructor>

    <method name = "uuid">
        Return our sphactor's UUID string, after successful initialization
        <return type = "zuuid" />
    </method>

    <method name = "name">
        Return our sphactor's name, after successful initialization. First 6
        characters of the UUID by default.
        <return type = "string" />
    </method>

    <method name = "endpoint">
        Return our sphactor's endpoint, after successful initialization. 
        The endpoint is usually inproc://{uuid}
        <return type = "string" />
    </method>

    <method name = "set name">
        Set the public name of this sphactor node overriding the default. 
        <argument name = "name" type = "string" />
    </method>

    <method name = "connect">
        Connect the node's sub socket to a pub endpoint. Returns 0 if succesful -1 on
        failure.
	<argument name = "endpoint" type="string" />
        <return type = "integer" />
    </method>

    <method name = "disconnect">
        Disconnect the node's sub socket from a pub endpoint. Returns 0 if succesful -1 on
        failure.
	<argument name = "endpoint" type="string" />
        <return type = "integer" />
    </method>

    <method name = "start">
        Start node, after setting header values. 
        Returns 0 if OK, -1 if it wasn't possible to start the node.
        <return type = "integer" />
    </method>

    <method name = "stop">
        Stop the node. This will not destroy the node but if you can start
        it again is undetermined.
    </method>

    <method name = "socket">
        Return socket for talking to the sphactor node and for polling.
        <return type = "zsock" />
    </method>

</class>
    
