<class name = "zyre" state = "stable">
    <constructor>
        Constructor, creates a new Zyre node. Note that until you star$
        node it is silent and invisible to other nodes on the network.
        The node name is provided to other nodes during discovery. If $
        specify NULL, Zyre generates a randomized node name from the U$
        <argument name = "name" type = "string" optional = "1" />
    </constructor>

    <destructor>
        Destructor, destroys a Zyre node. When you destroy a node, any
        messages it is sending or receiving will be discarded.
    </destructor>

    <method name = "uuid">
        Return our node UUID string, after successful initialization
        <return type = "string" />
    </method>

    <method name = "name">
        Return our node name, after successful initialization. First 6
        characters of UUID by default.
        <return type = "string" />
    </method>

    <method name = "set name">
        Set the public name of this node overriding the default. The n$
        provide during discovery and come in each ENTER message.
        <argument name = "name" type = "string" />
    </method>

    <method name = "start">
        Start node, after setting header values. When you start a node$
        begins discovery and connection. Returns 0 if OK, -1 if it was$
        possible to start the node.
        <return type = "integer" />
    </method>

    <method name = "stop">
        Stop node; this signals to other peers that this node will go $
        This is polite; however you can also just destroy the node wit$
        stopping it.
    </method>

    <method name = "socket">
        Return socket for talking to the Zyre node, for polling
        <return type = "zsock" />
    </method>

</class>
    
