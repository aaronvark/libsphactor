<class name = "sphactor_actor" state = "stable">

    <callback_type name = "handler_fn">
        Callback function for custom file descriptor handling
        <argument name = "fd" type = "anything" />
        <return type = "zmsg" />
    </callback_type>

    <constructor>
        Constructor, creates a new Sphactor_actor instance. 
        <argument name = "pipe" type = "zsock"  />
        <argument name = "arg" type = "anything" optional = "1" />
    </constructor>

    <destructor>
        Destructor, destroys a Sphactor_actor. 
    </destructor>

    <method name = "start">
        Return our sphactor's UUID string, after successful initialization
        <return type = "integer" />
    </method>

    <method name = "stop">
        Stop the sphactor_actor
        <return type = "integer" />
    </method>

    <method name = "connect">
        Connect this sphactor_actor to another. Returns 0 on success -1 
        on failure

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name="dest" type="string" />
        <return type = "integer" />
    </method>

    <method name = "disconnect">
        Disconnect this sphactor_actor to another. Returns 0 on success -1 
        on failure

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name="dest" type="string" />
        <return type = "integer" />
    </method>

    <method name = "uuid">
        Return our sphactor_actor's UUID string

        Note: sphactor_actor methods can only be called from within its instance!
        <return type = "zuuid" />
    </method>

    <method name = "name">
        Return our sphactor_actor's name. First 6 characters of the UUID by default.

        Note: sphactor_actor methods can only be called from within its instance!
        <return type = "string" />
    </method>

    <method name = "set timeout">
        Set the timeout for the polling of the sphactor_actor. 

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name = "timeout" type = "msecs" />
    </method>

    <method name = "poller add">
        Adds a file descriptor to our poller (wraps zpoller_add).

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name = "fd" type = "anything" />
        <argument name = "handler" type = "sphactor_actor_handler_fn" callback = "1"/>
        <return type = "integer" />
    </method>

    <method name = "poller remove">
        Removes a file descriptor from our poller (wraps zpoller_remove).

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name = "fd" type = "anything" />
        <return type = "integer" />
    </method>

    <method name = "atomic set report">
        Sets the status report. This is a very specific threadsafe lockfree method 
        to enable the controlling thread to get this actor's status.
        <argument name = "report" type = "sphactor report" />  
    </method>

    <method name = "atomic report">
        Gets the status report. This is a very specific threadsafe lockfree method 
        to enable the controlling thread to get this actor's status.
        <return type = "sphactor report" />  
    </method>
    
    <method name = "set custom report data">
        Sets the actor's osc message for future reports. Use this in
        handler functions to store data for use in rendering gui.
        <argument name = "message" type = "zosc" />
    </method>

</class>
