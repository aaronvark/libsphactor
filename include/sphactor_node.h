/*  =========================================================================
    sphactor_node - class description

    Copyright (c) the Contributors as noted in the AUTHORS file.

    This file is part of Zyre, an open-source framework for proximity-based
    peer-to-peer applications -- See http://zyre.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef SPHACTOR_NODE_H_INCLUDED
#define SPHACTOR_NODE_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/sphactor_node.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//  Constructor, creates a new Sphactor_node instance.
SPHACTOR_EXPORT sphactor_node_t *
    sphactor_node_new (zsock_t *pipe, void *arg);

//  Destructor, destroys a Sphactor_node.
SPHACTOR_EXPORT void
    sphactor_node_destroy (sphactor_node_t **self_p);

//  Return our sphactor's UUID string, after successful initialization
SPHACTOR_EXPORT int
    sphactor_node_start (sphactor_node_t *self);

//  Stop the sphactor_node
SPHACTOR_EXPORT int
    sphactor_node_stop (sphactor_node_t *self);

//  Connect this sphactor_node to another. Returns 0 on success -1
//  on failure
//
//  Note: sphactor_node methods can only be called from within its instance!
SPHACTOR_EXPORT int
    sphactor_node_connect (sphactor_node_t *self, const char *dest);

//  Disconnect this sphactor_node to another. Returns 0 on success -1
//  on failure
//
//  Note: sphactor_node methods can only be called from within its instance!
SPHACTOR_EXPORT int
    sphactor_node_disconnect (sphactor_node_t *self, const char *dest);

//  Return our sphactor_node's UUID string
//
//  Note: sphactor_node methods can only be called from within its instance!
SPHACTOR_EXPORT zuuid_t *
    sphactor_node_uuid (sphactor_node_t *self);

//  Return our sphactor_node's name. First 6 characters of the UUID by default.
//
//  Note: sphactor_node methods can only be called from within its instance!
SPHACTOR_EXPORT const char *
    sphactor_node_name (sphactor_node_t *self);

//  Self test of this class.
SPHACTOR_EXPORT void
    sphactor_node_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
