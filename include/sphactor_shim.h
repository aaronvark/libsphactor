/*  =========================================================================
    sphactor_shim - class description

    Copyright (c) the Contributors as noted in the AUTHORS file.

    This file is part of Zyre, an open-source framework for proximity-based
    peer-to-peer applications -- See http://zyre.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef SPHACTOR_SHIM_H_INCLUDED
#define SPHACTOR_SHIM_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/sphactor_shim.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
// Callback function for socket activity
typedef zmsg_t * (sphactor_shim_handler_fn) (
    sphactor_shim_t *self, zmsg_t *msg, void *arg);

//  Constructor, creates a new sphactor_shim node.
SPHACTOR_EXPORT sphactor_shim_t *
    sphactor_shim_new (void);

//  Destructor, destroys a sphactor_shim.
SPHACTOR_EXPORT void
    sphactor_shim_destroy (sphactor_shim_t **self_p);

//  Register a handler to be used on socket on socket activity. When the node has messages, the reactor will call the handler, passing the arg. Returns 0 if OK, -1 if there was an error.
SPHACTOR_EXPORT int
    sphactor_shim_handler (sphactor_shim_t *self, sphactor_shim_handler_fn handler, void *arg);

//  Execute the handler. Returns a zmsg or NULL.
SPHACTOR_EXPORT zmsg_t *
    sphactor_shim_handle (sphactor_shim_t *self, zmsg_t *msg);

//  Set the name for humans to see. You can only set this before the node runs! Returns 0 on success -1 on failure.
SPHACTOR_EXPORT int
    sphactor_shim_set_name (sphactor_shim_t *self, const char *name);

//  Set the uuid identifier. You can only set this before the node runs! Returns 0 on success -1 on failure.
SPHACTOR_EXPORT int
    sphactor_shim_set_uuid (sphactor_shim_t *self, zuuid_t *uuid);

//  Set verbose tracing on/off. The default verbose     setting is off (false).
SPHACTOR_EXPORT void
    sphactor_shim_set_verbose (sphactor_shim_t *self, bool verbose);

//  Self test of this class.
SPHACTOR_EXPORT void
    sphactor_shim_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
